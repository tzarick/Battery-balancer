var Defaults = xdc.useModule('xdc.runtime.Defaults');
var Diags = xdc.useModule('xdc.runtime.Diags');
var Error = xdc.useModule('xdc.runtime.Error');
var Log = xdc.useModule('xdc.runtime.Log');
var LoggerBuf = xdc.useModule('xdc.runtime.LoggerBuf');
var Main = xdc.useModule('xdc.runtime.Main');
var SysMin = xdc.useModule('xdc.runtime.SysMin');
var System = xdc.useModule('xdc.runtime.System');
var Text = xdc.useModule('xdc.runtime.Text');

var BIOS = xdc.useModule('ti.sysbios.BIOS');
var Clock = xdc.useModule('ti.sysbios.knl.Clock');
var Task = xdc.useModule('ti.sysbios.knl.Task');
var Semaphore = xdc.useModule('ti.sysbios.knl.Semaphore');

var Hwi = xdc.useModule('ti.sysbios.family.c28.Hwi');
var Event = xdc.useModule('ti.sysbios.knl.Event');
var ti_sysbios_hal_Hwi = xdc.useModule('ti.sysbios.hal.Hwi');
var Swi = xdc.useModule('ti.sysbios.knl.Swi');
var Boot = xdc.useModule('ti.catalog.c2800.init.Boot');
var Memory = xdc.useModule('xdc.runtime.Memory');

/*
 * Uncomment this line to globally disable Asserts.
 * All modules inherit the default from the 'Defaults' module.  You
 * can override these defaults on a per-module basis using Module.common$. 
 * Disabling Asserts will save code space and improve runtime performance.
Defaults.common$.diags_ASSERT = Diags.ALWAYS_OFF;
 */

/*
 * Uncomment this line to keep module names from being loaded on the target.
 * The module name strings are placed in the .const section. Setting this
 * parameter to false will save space in the .const section.  Error and
 * Assert messages will contain an "unknown module" prefix instead
 * of the actual module name.
Defaults.common$.namedModule = false;
 */

/*
 * Minimize exit handler array in System.  The System module includes
 * an array of functions that are registered with System_atexit() to be
 * called by System_exit().
 */
System.maxAtexitHandlers = 4;       

/* 
 * Uncomment this line to disable the Error print function.  
 * We lose error information when this is disabled since the errors are
 * not printed.  Disabling the raiseHook will save some code space if
 * your app is not using System_printf() since the Error_print() function
 * calls System_printf().
Error.raiseHook = null;
 */

/* 
 * Uncomment this line to keep Error, Assert, and Log strings from being
 * loaded on the target.  These strings are placed in the .const section.
 * Setting this parameter to false will save space in the .const section.
 * Error, Assert and Log message will print raw ids and args instead of
 * a formatted message.
Text.isLoaded = false;
 */

/*
 * Uncomment this line to disable the output of characters by SysMin
 * when the program exits.  SysMin writes characters to a circular buffer.
 * This buffer can be viewed using the SysMin Output view in ROV.
SysMin.flushAtExit = false;
 */

/*
 * The BIOS module will create the default heap for the system.
 * Specify the size of this default heap.
 */
BIOS.heapSize = 1024;

/*
 * Build a custom SYS/BIOS library from sources.
 */
BIOS.libType = BIOS.LibType_Custom;

/* System stack size (used by ISRs and Swis) */
Program.stack = 0x100;

/* Circular buffer size for System_printf() */
SysMin.bufSize = 0x200;

/* 
 * Create and install logger for the whole system
 */
var loggerBufParams = new LoggerBuf.Params();
loggerBufParams.numEntries = 32;
var logger0 = LoggerBuf.create(loggerBufParams);
Defaults.common$.logger = logger0;
Main.common$.diags_INFO = Diags.ALWAYS_ON;

System.SupportProxy = SysMin;
var event0Params = new Event.Params();
event0Params.instance.name = "StateChangeEvent";
Program.global.StateChangeEvent = Event.create(event0Params);
ti_sysbios_hal_Hwi.dispatcherAutoNestingSupport = false;
ti_sysbios_hal_Hwi.dispatcherSwiSupport = true;
var ti_sysbios_hal_Hwi0Params = new ti_sysbios_hal_Hwi.Params();
ti_sysbios_hal_Hwi0Params.instance.name = "I2C_TCA9555_HWI";
ti_sysbios_hal_Hwi0Params.enableInt = true;
Program.global.I2C_TCA9555_HWI = ti_sysbios_hal_Hwi.create(88, "&I2C_Interrupt", ti_sysbios_hal_Hwi0Params);
Semaphore.supportsEvents = false;
var ti_sysbios_hal_Hwi1Params = new ti_sysbios_hal_Hwi.Params();
ti_sysbios_hal_Hwi1Params.instance.name = "CAN_Recieve_HWI";
ti_sysbios_hal_Hwi1Params.arg = 0;
Program.global.CAN_Recieve_HWI = ti_sysbios_hal_Hwi.create(101, "&CAN_Receive_Interrupt", ti_sysbios_hal_Hwi1Params);
var clock1Params = new Clock.Params();
clock1Params.instance.name = "CAN_RTR";
clock1Params.period = 500;
clock1Params.startFlag = true;
Program.global.CAN_RTR = Clock.create("&SendCAN", 1000, clock1Params);
var event1Params = new Event.Params();
event1Params.instance.name = "I2C_Event";
Program.global.I2C_Event = Event.create(event1Params);
var ti_sysbios_hal_Hwi3Params = new ti_sysbios_hal_Hwi.Params();
ti_sysbios_hal_Hwi3Params.instance.name = "SPI_HWI";
ti_sysbios_hal_Hwi3Params.arg = 0;
Program.global.SPI_HWI = ti_sysbios_hal_Hwi.create(74, "&SPI_HandleInterrupt", ti_sysbios_hal_Hwi3Params);
var event2Params = new Event.Params();
event2Params.instance.name = "SPI_Event";
Program.global.SPI_Event = Event.create(event2Params);
var task1Params0 = new Task.Params();
task1Params0.instance.name = "SPI_EventHandleTask";
task1Params0.stackSize = 256;
task1Params0.priority = 1;
Program.global.SPI_EventHandleTask = Task.create("&SPI_HandleEvent", task1Params0);
Clock.timerId = 1;
var ti_sysbios_hal_Hwi3Params0 = new ti_sysbios_hal_Hwi.Params();
ti_sysbios_hal_Hwi3Params0.instance.name = "Timer_HWI";
Program.global.Timer_HWI = ti_sysbios_hal_Hwi.create(38, "&Timer_ISR", ti_sysbios_hal_Hwi3Params0);
Clock.tickPeriod = 1000;
Boot.configurePll = false;
Memory.defaultHeapSize = 1024;
Program.heap = 256;
var ti_sysbios_hal_Hwi4Params = new ti_sysbios_hal_Hwi.Params();
ti_sysbios_hal_Hwi4Params.instance.name = "TCA9555_INT_HWI";
Program.global.TCA9555_INT_HWI = ti_sysbios_hal_Hwi.create(35, "&I2C_TCA9555Interrupt", ti_sysbios_hal_Hwi4Params);
var event3Params = new Event.Params();
event3Params.instance.name = "I2C_Receive_Event";
Program.global.I2C_Receive_Event = Event.create(event3Params);
var task2Params = new Task.Params();
task2Params.instance.name = "BatteryController";
task2Params.priority = 3;
Program.global.BatteryController = Task.create("&BatteryController_Task", task2Params);
var task2Params0 = new Task.Params();
task2Params0.instance.name = "StateChange";
Program.global.StateChange = Task.create("&StateChangeTask", task2Params0);
